#!/usr/bin/perl

use Getopt::Long;
use Data::Dumper;   # for devel

# coming soon ...
#use Getopt::Long::Descriptive;
# see: http://stackoverflow.com/questions/3515877/how-to-print-program-usage-in-perl

# ---
$|++;   # don't buffer stdout

# ---
$config_file = "/home/br/config";
$prefx = "_br_";

# ---
%hosts = ();
@on = ();
@off = ();
@list = ();
%commands = ();
#%flags = (autoprime=>1, startup=>1);

# ---
%services = (
    rooms => {installed=>sub{`which node`;}, running=>sub{_ps_grep('-c /tmp/br/app_config.js');}, value=>sub{$hosts{rooms}}, required=>1},
    my => {installed=>sub{`which rails` && -d '/home/br/gits/clouds/gen/rails/my';}, running=>sub{_ps_grep('-p 3001');}, value=>sub{$hosts{my}}},
    freeswitch => {installed=>sub{-x '/usr/local/freeswitch/bin/freeswitch';}, running=>sub{_ps_grep('-m /usr/local/freeswitch/bin/freeswitch -db');}},
    red5 => {installed=>sub{-d '/home/br/gits/red5';}, running=>sub{_ps_grep('-Dred5.root=/home/br/gits/red5/');}},
    mysqld => {installed=>sub{-d '/var/log/br/mysql';}, running=>sub{_ps_grep('/usr/libexec/mysqld');}, required=>1},
    netops => {installed=>sub{1;}, running=>sub{_ps_grep('/bin/su br -c ./init.pl');}, required=>1},
);
%onoff = (autoprime=>1, startup=>1,    'rooms'=>1, 'freeswitch'=>1, 'red5'=>1, 'my'=>1, 'netops'=>1, 'mysqld'=>1);  # defaults
%list_functions = (
    services => list_services,
    flags => list_flags,
    keycerts =>  list_keycerts,
    all => list_all,
);
%misc = ();

# ---
$result = GetOptions (
    "host=s" => \$commands{host},
    "ip=s" => \$commands{ip},
    "on=s" => \@on,
    "off=s" => \@off,
    "list=s" => \@list,
    "online" => \$commands{online},
    "offline" => \$commands{offline},
    "resetdb" => \$commands{offline},
    "check" => \$commands{check},
    "status" => \$commands{status},
    "cyclekeys" => \$commands{cyclekeys},
    "help" => \$commands{help},
    "write" => \$commands{write},
    
#                        "length=i" => \$length,     # numeric
#                        "file=s"   => \$data,       # string
#                        "verbose"  => \$verbose     # flag
) or help(1);   # doesn't seem to fire if bad options ...

# ---
$ps_output = undef;
sub _ps_grep
{
    my $pattern = shift;
#    $pattern =~ s/\-/\\-/g;
    $ps_output = `ps axw` if not defined $ps_output;
#    my $cmd = "ps xw | grep '$pattern'";
##print $cmd;
#    `$cmd`;
#    $pattern = quotemeta($pattern);
#print $ps_output;
#print $pattern;
#exit 0;
#$ps_out = 'foobar';
#    return ($ps_output =~ /$pattern/m);
    $ps_output =~ /\Q$pattern\E/m;
}

# ---
sub read_config
{
    my $no_content = 1;
    if (-f $config_file && open(IF, "<$config_file")) {
        foreach(<IF>) {
            $no_content = 0;
            next if not /^\s*#\Q$prefx\E([^\-]+)\-([^:]*):(.*)$/;
            my ($var,$key,$val) = ($1,$2,$3);
            $$var{$key} = $val;
#print "$var $key $val\n";
            }
        close(IF);
        }
    if ($no_content) {
        print "Warning: could not read configuration file '$config_file', using defaults\n";
        $misc{privatekey} = "/home/br/gits/clouds/clouds/misc/dummy_privatekey.pem";
        $misc{certificate} = "/home/br/gits/clouds/clouds/misc/dummy_certificate.pem";
        $misc{production_rb} = "/home/br/gits/clouds/gen/rails/my/config/environments/production.rb";
        cyclekeys();
        return 0;
        }
    return 1;
}

# ---
sub write_config
{
    my $fh = shift;
    
    # --- improvised solution to merge in "advanced" configuration for larger, scaled configurations
    my %oo = %onoff;
    my $adv = "/home/br/.advanced";
    if (-f $adv) {
        open AIF, "<$adv" || die;
        foreach (<AIF>) {
            print $fh $_;
            }
        close AIF;
        $oo{autoprime} = undef;
        $oo{startup} = undef;
        }

    my $dummy =<<__EOT__
autoprime:
ngx_cln:     {script: "mk_clean_dir", dir: "/etc/nginx/br_conf.d"}
ngx_wd_cert: {script: "nginx_cert", file: "/etc/nginx/br_conf.d/babelroom.com.cert.inc", cert: "/home/br/gits/clouds/netops/certs/wd_bundle.crt", key: "/home/br/gits/clouds/netops/certs/wd.key", deps: ['ngx_cln']}
ngx_my_cert: {script: "empty_file", file: "/etc/nginx/br_conf.d/my.babelroom.com.cert.inc", cert: "/home/br/gits/clouds/netops/certs/my.crt", key: "/home/br/gits/clouds/netops/certs/my.key", deps: ['ngx_cln']}
ngx_cdn_cert: {script: "empty_file", file: "/etc/nginx/br_conf.d/cdn.babelroom.com.cert.inc", cert: "/home/br/gits/clouds/netops/certs/cdn.crt", key: "/home/br/gits/clouds/netops/certs/cdn.key", deps: ['ngx_cln']}
ngx_no_cert: {script: "empty_file", file: "/etc/nginx/br_conf.d/no.babelroom.com.cert.inc", cert: "/home/br/gits/clouds/netops/certs/no.crt", key: "/home/br/gits/clouds/netops/certs/no.key", deps: ['ngx_cln']}
ngx_www_bblr_co_cert: {script: "nginx_cert", file: "/etc/nginx/br_conf.d/www.bblr.co.cert.inc", cert: "/home/br/gits/clouds/netops/certs/bblr_bundle.crt", key: "/home/br/gits/clouds/netops/certs/www.bblr.co.key", deps: ['ngx_cln']}
ngx_proxy_common_inc: {src: "proxy_common_inc", file: "/etc/nginx/br_conf.d/proxy_common.inc"}
mongrel_my: {script: "mongrel_rc", file: "/etc/init.d/mongrel_my", path: "/home/br/gits/clouds/gen/rails/my", port: 3001, label: "my", rails_env: "production"}
mongrel_no: {script: "mongrel_rc", file: "/etc/init.d/mongrel_no", path: "/home/br/gits/clouds/gen/rails/netops", port: 3002, label: "no", rails_env: "production"}
ngx_my: {script: "proxy_conf", label: "my", root: "/home/br/gits/clouds/gen/rails/my/public", iface: "eth0:1", port: 3001, deps: ['ngx_my_cert','ngx_proxy_common_inc','mongrel_my']}
ngx_no: {script: "proxy_conf", label: "no", root: "/home/br/gits/clouds/gen/rails/netops/public", auth_file: "no_htpasswd", iface: "eth0:1", port: 3002, deps: ['ngx_no_cert','ngx_proxy_common_inc','mongrel_no']}
ngx_myapi: {script: "myapi_conf", iface: "eth0:1", port: 3001, deps: ['ngx_proxy_common_inc','mongrel_my']}
ngx_bblr_co: {script: "bblr_co_conf", iface: "eth0:1", deps: ['ngx_www_bblr_co_cert']}
ngx_cdn: {script: "cdn_conf", iface: "eth0:1", deps: ['ngx_cdn_cert']}
prime_nginx: {script: "nginx_conf", deps: ['ngx_wd_cert','ngx_my','ngx_no','ngx_cdn','ngx_bblr_co','ngx_myapi']}
node_config_app: {script: "config_js", iface: "eth0", file: "/tmp/br/app_config.js"}
prime_node_app: {script: "node_rc", file: "/etc/init.d/node_app", path: "/home/br/gits/clouds/gen/node", config_file: "/tmp/br/app_config.js", label: "app", deps: ['node_config_app']}
prime_netops: {src: "netops_rc", file: "/etc/init.d/netops", mode: "0755"}
prime_red5: {src: "red5_rc", file: "/etc/init.d/red5", mode: "0755"}
prime_mysqld: {script: "my_cnf", server_id: 37}
prime_freeswitch: {script: "vars_xml", eip: "54.241.140.39"}

# startup -- in order
startup:    mysqld freeswitch fail2ban nginx   node_app mongrel_my mongrel_no estream red5   netops
__EOT__
;
    my $startup = '';
    print $fh "autoprime:\n" if ($oo{autoprime});
    sub add($$$) {my ($s,$p,$l)=@_; if ($oo{$s}) { print $fh "$l\n"; $startup .= "$p "; } }
    add(mysqld, mysqld, 'prime_mysqld: {script: "my_cnf", server_id: 37}');
    add(freeswitch, freeswitch, "prime_freeswitch: {script: \"vars_xml\", eip: \"$misc{ip}\"}");
    # netops last
    add(rooms,node_app,<<__EOT__
node_config_app: {script: "config_js", iface: "eth0", secret: "$misc{secret}", key: "$misc{privatekey}", cert: "$misc{certificate}", cookie_key: "$misc{cookie_key}", domain: "$misc{domain}", file: "/tmp/br/app_config.js"}
prime_node_app: {script: "node_rc", file: "/etc/init.d/node_app", path: "/home/br/gits/clouds/gen/node", config_file: "/tmp/br/app_config.js", label: "app", deps: ['node_config_app']}
__EOT__
);
    add('my',mongrel_my,<<__EOT__
my_rails_session_store: {script: "rails_session_store", domain: "$misc{domain}", secret: "$misc{secret}", file: "/home/br/gits/clouds/gen/rails/my/config/initializers/session_store.rb"}
my_rails_cookie_verification_secret: {script: "rails_cookie_verification_secret", secret: "$misc{cookie_verification_secret}", file: "/home/br/gits/clouds/gen/rails/my/config/initializers/cookie_verification_secret.rb"}
my_rails_s3: {script: "rails_s3", key_id: "$misc{s3_key_id}", key: "$misc{s3_key}", file: "/home/br/gits/clouds/gen/rails/my/config/s3.yml"}
my_rails_environment: {script: "my_rails_environment", default: "$hosts{default}", landing: "$hosts{landing}", rooms: "$hosts{rooms}", api: "$hosts{api}", cookie_key: "$misc{cookie_key}", file: "$misc{production_rb}"}
mongrel_my: {script: "mongrel_rc", file: "/etc/init.d/mongrel_my", path: "/home/br/gits/clouds/gen/rails/my", addr: "0.0.0.0", port: 3001, label: "my", rails_env: "production", deps: ['my_rails_session_store','my_rails_cookie_verification_secret','my_rails_s3','my_rails_environment']}
prime_my: {script: "noop", deps: ['mongrel_my','my_rails_session_store','my_rails_cookie_verification_secret','my_rails_s3','my_rails_environment']}
__EOT__
);
    $startup .= "estream ";
    add(red5, red5, 'prime_red5: {src: "red5_rc", file: "/etc/init.d/red5", mode: "0755"}');
    add(netops, netops,<<__EOT__
netops_db_syscfg: {script: "netops_db_syscfg", file: "/tmp/br/netops_db_syscfg", my_host: "", mode: "0600", s3_key_id: "$misc{s3_key_id}", s3_key: "$misc{s3_key}", gmail_user: "$misc{gmail_user}", gmail_password: "$misc{gmail_password}", recurly_config: "$misc{recurly_config}"}
prime_netops: {src: "netops_rc", file: "/etc/init.d/netops", mode: "0755", deps: ['netops_db_syscfg']}
__EOT__
);
    if ($oo{startup}) {
        print $fh "# startup -- in order\nstartup: $startup\n";
        }
    print $fh "\n";
    sub outvar {
        my $vn = shift;
        my %h = %$vn;
        foreach my $key (keys %h) {
            print $fh "#$prefx$vn-$key:$h{$key}\n";
            }
        }
    print $fh "# -------------- CUT HERE --------------- If you are copying this data to the user-data field of Amazon ec2 you only need copy up to this line\n";
    print $fh "# --- All values from this point are used to preserve configuration for 'br' and not used directing in priming\n";
    outvar(hosts);
    outvar(onoff);
    outvar(misc);
    print "Configuration written\n";
}

## ---
#sub flags()
#{
#    my $mod = 0;
#    foreach my $key (keys %flags) {
#        }
#}

# ---
sub list_services()
{
#<<<<<<<<< @<<<<<<<<<<<<<<<<<< @>>> @<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    print <<__EOT__
Service    Status              Flag Notes / Configuration 
-------    ------              ---- ---------------------
__EOT__
;
    foreach my $key(keys %services) {
        my ($status, $oo, $value);
        $status = $services{$key}{installed}() ? ($services{$key}{running}() ? 'running' : 'installed') : undef;
        $oo = (defined ($status) && $onoff{$key}) ? 'on' : 'off';
        if (defined $services{$key}{required} && $oo ne 'on') {
            $value = '[ERROR -- required service] ';
            }
        $value .= defined($services{$key}{value}) ? $services{$key}{value}() : '';
        $status = 'NOT installed' if not defined $status;
        format SC =
@<<<<<<<<< @<<<<<<<<<<<<<<<<<< @<<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$key $status $oo $value
.
#123456789.123456789.223456789.323456789.423456789.523456789.623456789.723456789.823456789
        $~ = "SC";
        write;
        }
}
sub list_flags()
{
    sub wflag { my $fn=shift; print "$fn: " . ($onoff{$fn} ? 'on' : 'off') . "\n"; }
    print "---\n";
    wflag(autoprime);
    wflag(startup);
}
sub list_all()
{
    list_services();
    list_flags();
}

# ---
sub onoff()
{
    my $key;
    my $mod = 0;
    foreach $key (@on) {
        $mod = 1 if not $onoff{$key};
        $onoff{$key} = 1;
        }
    foreach $key (@off) {
        $mod = 1 if $onoff{$key};
        $onoff{$key} = 0;
        }
    return $mod;
}
sub list()
{
    foreach $key (@list) {
        my $fn = $list_functions{$key};
        &$fn() if $fn;
        }
}
sub online($) {
    my $mod = shift;
    do_write_config() if $mod;
    print "Bring online...\n";
    $cmd = "sudo service babelroom-prime start";
    print "$cmd\n";
    print `$cmd`;
    $cmd = "sudo service babelroom-run start";
    print "$cmd\n";
#    print `$cmd`;
    system($cmd);
}
sub offline($) {
    my $mod = shift;
    do_write_config() if $mod;
    print "Bring offline...\n";
    $cmd = "sudo service babelroom-run stop";
    print "$cmd\n";
#    print `$cmd`;
    system($cmd);
}
sub resetdb($) {
    my $mod = shift;
    offline($mod);
    $cmd = "(cd /home/br/gits/clouds/clouds && ./setup_db.sh)";
    print "$cmd\n";
#    print `$cmd`;
    system($cmd);
}
sub cyclekeys() {
#    $misc{cookie_key} = 'brv1_' . join "", map { unpack "H*", chr(rand(256)) } 1..4; -- don't need this
    $misc{secret} = join "", map { unpack "H*", chr(rand(256)) } 1..64;
    $misc{cookie_verification_secret} = join "", map { unpack "H*", chr(rand(256)) } 1..64;
    return 1;   # modified
}
sub check() {}
sub status()
{
    list_services();
    list_flags();
}
sub host($)
{
    my $host = shift;
    $hosts{default} = $hosts{landing} = $hosts{rooms} = $hosts{api} = $host;
    $hosts{my} = $host{myapi} = "$host:3001";
    return 1;   # modified
}
sub update_misc($$)
{
    my ($k,$v) = @_;
    my $mod = 0;
    $mod = 1 if $misc{$k} ne $v;
    $misc{$k} = $v;
    return $mod;  # modified
}

# ---
sub help($) 
{
    my $mod = shift;
#[ rooms | freeswitch | red5 | my | netops | mysqld ]
    print <<__EOT__
# this feature is under development and not yet documented
--host
--on
--off
--list
--online
--offline
--resetdb
--check
--status
--cyclekeys
--help
--write
__EOT__
;
    return 0;
}

# ---
sub do_write_config
{
    open OF, ">$config_file";
    write_config(OF);
    close OF;
}

# ---
sub logic
{
    # ---
    my $mod = shift;
    if (length(@on) or length(@off)) { $mod = 1 if onoff(); }
    list();
    check() if defined($commands{check});
    status() if defined($commands{status});
    help(0) if defined($commands{help});
    $mod = 1 if defined($commands{write});
    if (defined($commands{ip})) { if (update_misc(ip,$commands{ip})) { $mod=1 }; }
    if (defined($commands{privatekey})) { if (update_misc(privatekey,$commands{privatekey})) { $mod=1 }; }
    if (defined($commands{certificate})) { if (update_misc(certificate,$commands{certificate})) { $mod=1 }; }
    if (defined($commands{host})) { if (host($commands{host})) { $mod=1 }; }
    if (defined($commands{cyclekeys})) { if (cyclekeys()) { $mod=1 }; }
    online($mod) if defined($commands{online});
    offline($mod) if defined($commands{offline});
    resetdb($mod) if defined($commands{resetdb});

    return if (!$mod);

    do_write_config();
}

# ---
my $read = read_config();
logic(!$read);

